#include "ros/ros.h"
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Point.h>
#include "nav_msgs/Odometry.h"
#include <tf/tf.h>
#include <math.h>
#include <iostream>

double roll;
double pitch;
double yaw;

void PID_control(double x, double y);

geometry_msgs::Twist move; //declare type class of twist
geometry_msgs::Point goal_point;
nav_msgs::Odometry pose;

struct XYZ{
  float x;
  float y;
  float z;
  float total_error;
};

struct XYZ pos_err_I;

void pos_cb(const nav_msgs::Odometry::ConstPtr &msg) //if you use this you should't use ->
{
  pose = *msg;
}

void rotate2D(float &x, float &y, const nav_msgs::Odometry pose)
{
  float x1 = x;
  float y1 = y;

  // quaternion
  tf::Quaternion Q(
  pose.pose.pose.orientation.x,
  pose.pose.pose.orientation.y,
  pose.pose.pose.orientation.z,
  pose.pose.pose.orientation.w);
  
  //quaternino transform RPY
  //body frame translate world frame
  tf::Matrix3x3 M(Q);
  M.getRPY(roll,pitch,yaw);

  x = cos(-yaw) * x1 - sin(-yaw) * y1;
  y = sin(-yaw) * x1 + cos(-yaw) * y1;
}



int main(int argc, char **argv)
{
    ROS_INFO("start");
    ros::init(argc, argv,"PID_new");
    ros::NodeHandle n;

    ros::Subscriber odom_Subscriber = n.subscribe<nav_msgs::Odometry>("odom", 100,pos_cb);
    ros::Publisher velocity_publisher = n.advertise<geometry_msgs::Twist>("cmd_vel",100);

    goal_point.x = 3;
    goal_point.y = 0;

    ros::Rate loop_rate(10);

    int count = 0;
    while((ros::ok))
    {
        ROS_INFO_STREAM( "INFO message."<< count);
        ROS_INFO_STREAM( "goal x : " << goal_point.x <<"goal y : " << goal_point.y);
        ROS_INFO_STREAM( "pose x : " << pose.pose.pose.position.x <<"pose y : " << pose.pose.pose.position.y);


        pos_err_I.x = goal_point.x - pose.pose.pose.position.x; //error x
        pos_err_I.y = goal_point.y - pose.pose.pose.position.y; //error y
        pos_err_I.total_error = sqrt(pow(pos_err_I.x,2)+pow(pos_err_I.y,2));// rrror distance
        ROS_INFO_STREAM( "total_error : " << pos_err_I.total_error);


        rotate2D(pos_err_I.x, pos_err_I.y, pose);

        ROS_INFO_STREAM( "yaw : " << yaw);

        move.linear.x = 0.65* pos_err_I.x; // 5degree per second
        move.angular.z = 0.5 * pos_err_I.y;
        velocity_publisher.publish(move);

        if(pos_err_I.total_error < 0.3)
        {
           move.linear.x = 0;
           move.angular.z = 0;
           velocity_publisher.publish(move);
           break;
        }

        count ++;
        ros::spinOnce();
        loop_rate.sleep();
    }
    return 0;
}
